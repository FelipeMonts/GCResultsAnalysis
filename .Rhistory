# the best model for the standard calibration is the one using all the standards data in a linear regression
#
#
##################################################################################################################
#### CO2 standards calibration ####
CO2.Calibration <- lm(CO2.ppm ~ CO2 , data = GC.standards) ;
summary(CO2.Calibration)
# Call:
#   lm(formula = CO2.ppm ~ CO2, data = GC.standards)
#
# Residuals:
#   Min      1Q  Median      3Q     Max
# -2556.7  -272.6  -147.0   123.9  3928.5
#
# Coefficients:
#   Estimate Std. Error t value Pr(>|t|)
# (Intercept) -31.605388  39.270520  -0.805    0.421
# CO2           0.269938   0.004337  62.242   <2e-16 ***
#   ---
#   Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
#
# Residual standard error: 696.6 on 599 degrees of freedom
# Multiple R-squared:  0.8661,	Adjusted R-squared:  0.8659
# F-statistic:  3874 on 1 and 599 DF,  p-value: < 2.2e-16
#### N20 standards calibration ####
N2O.Calibration <- lm(N2O.ppm ~ N2O , data = GC.standards) ;
summary(N2O.Calibration)
# Call:
#   lm(formula = N2O.ppm ~ N2O, data = GC.standards)
#
# Residuals:
#   Min      1Q  Median      3Q     Max
# -23.093  -1.763  -1.525  -0.551  41.403
#
# Coefficients:
#   Estimate Std. Error t value Pr(>|t|)
# (Intercept) 1.425e+00  3.382e-01   4.214  2.9e-05 ***
#   N2O         1.494e-03  2.159e-05  69.213  < 2e-16 ***
#   ---
#   Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
#
# Residual standard error: 6.605 on 595 degrees of freedom
# (4 observations deleted due to missingness)
# Multiple R-squared:  0.8895,	Adjusted R-squared:  0.8893
# F-statistic:  4790 on 1 and 595 DF,  p-value: < 2.2e-16
#
#### CH4 standards calibration ####
CH4.Calibration <- lm(CH4.ppm ~ CH4 , data = GC.standards) ;
summary(CH4.Calibration)
# Call:
#   lm(formula = CH4.ppm ~ CH4, data = GC.standards)
#
# Residuals:
#   Min      1Q  Median      3Q     Max
# -30.104  -2.879  -1.213   1.128  40.544
#
# Coefficients:
#   Estimate Std. Error t value Pr(>|t|)
# (Intercept) 2.465241   0.353385   6.976 8.06e-12 ***
#   CH4         0.116513   0.001816  64.143  < 2e-16 ***
#   ---
#   Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
#
# Residual standard error: 6.786 on 599 degrees of freedom
# Multiple R-squared:  0.8729,	Adjusted R-squared:  0.8727
# F-statistic:  4114 on 1 and 599 DF,  p-value: < 2.2e-16
# ###############################################################################################################
#
#                              Exploring the data without standards
#
###############################################################################################################
##### Data with no standards included
str(GC.standards)
str(PeakArea.results)
levels(GC.standards$Factor.Name)
GC.Data.NoSTD<-PeakArea.results[!(PeakArea.results$Sample.Name %in% levels(GC.standards$Factor.Name)),];
str(GC.Data.NoSTD)
plot.CH4.hist.dat<-hist(GC.Data.NoSTD$CH4)
plot.CH4.density.dat<-density(GC.Data.NoSTD$CH4, na.rm=T)
plot.CO2.hist.dat<-hist(GC.Data.NoSTD$CO2)
plot.CO2.density.dat<-density(GC.Data.NoSTD$CO2, na.rm=T)
plot.N2O.hist.dat<-hist(GC.Data.NoSTD$N2O)
plot.N2O.density.dat<-density(GC.Data.NoSTD$N2O, na.rm=T)
###############################################################################################################
#
#            Calculation of concentration based on the Standard gas concentrations
#
#
###############################################################################################################
str(GC.Data.NoSTD)
##### CO2 ######
GC.Data.NoSTD$CO2.Intercept <- coefficients(CO2.Calibration)[1] ;
GC.Data.NoSTD$CO2.Slope <- coefficients(CO2.Calibration)[2] ;
GC.Data.NoSTD$CO2.ppm <- (GC.Data.NoSTD$CO2 * GC.Data.NoSTD$CO2.Slope) + GC.Data.NoSTD$CO2.Intercept ;
##### N2O ######
GC.Data.NoSTD$N2O.Intercept <- coefficients(N2O.Calibration)[1] ;
GC.Data.NoSTD$N2O.Slope <- coefficients(N2O.Calibration)[2] ;
GC.Data.NoSTD$N2O.ppm <- (GC.Data.NoSTD$N2O * GC.Data.NoSTD$N2O.Slope) + GC.Data.NoSTD$N2O.Intercept ;
##### CH4 ######
GC.Data.NoSTD$CH4.Intercept <- coefficients(CH4.Calibration)[1] ;
GC.Data.NoSTD$CH4.Slope <- coefficients(CH4.Calibration)[2] ;
GC.Data.NoSTD$CH4.ppm <- (GC.Data.NoSTD$CH4 * GC.Data.NoSTD$CH4.Slope) + GC.Data.NoSTD$CH4.Intercept ;
###############################################################################################################
#
#                               Organizing the data for visualization
#
###############################################################################################################
str(GC.Data.NoSTD)
### Organizing the data according to Treatments
unique(GC.Data.NoSTD$Sample.Name)
GC.Data.NoSTD$Treatment<-c("NONE");
GC.Data.NoSTD[grep("AT",GC.Data.NoSTD$Sample.Name), c("Treatment")]<-c("A");
GC.Data.NoSTD[grep("BT",GC.Data.NoSTD$Sample.Name), c("Treatment")]<-c("B");
GC.Data.NoSTD[grep("CT",GC.Data.NoSTD$Sample.Name), c("Treatment")]<-c("C");
GC.Data.NoSTD[grep("DT",GC.Data.NoSTD$Sample.Name), c("Treatment")]<-c("D");
### Check if there was any treatment left with "NONE" label
GC.Data.NoSTD[which(GC.Data.NoSTD$Treatment == "NONE"), ];
### Organizing the data according to Blocks
grep("B1",GC.Data.NoSTD$Sample.Name)
GC.Data.NoSTD$BLOCK<-c(9999);
GC.Data.NoSTD[grep("B1",GC.Data.NoSTD$Sample.Name), c("BLOCK")]<-c(1);
GC.Data.NoSTD[grep("B2",GC.Data.NoSTD$Sample.Name), c("BLOCK")]<-c(2);
GC.Data.NoSTD[grep("B3",GC.Data.NoSTD$Sample.Name), c("BLOCK")]<-c(3);
GC.Data.NoSTD[grep("B4",GC.Data.NoSTD$Sample.Name), c("BLOCK")]<-c(4);
### Check if there was any BLOCK labeled 9999
GC.Data.NoSTD[which(GC.Data.NoSTD$BLOCK == 9999 ), ];
### Organizing the data according to CoverCrop
grep("3Spp",GC.Data.NoSTD$Sample.Name)
GC.Data.NoSTD$CoverCrop<-c("NONE");
GC.Data.NoSTD[grep("3Spp",GC.Data.NoSTD$Sample.Name), c("CoverCrop")]<-c("3Spp");
GC.Data.NoSTD[grep("Clover",GC.Data.NoSTD$Sample.Name), c("CoverCrop")]<-c("Clover");
GC.Data.NoSTD[grep("Trit",GC.Data.NoSTD$Sample.Name), c("CoverCrop")]<-c("Trit");
### Check if there was any  CoverCrop labeled "NONE"
GC.Data.NoSTD[which(GC.Data.NoSTD$CoverCrop == "NONE" ), ];
### Organizing the data according to Sampling Time Order
grep("T0",GC.Data.NoSTD$Sample.Name)
GC.Data.NoSTD$Sampling.Time<-c(9999);
GC.Data.NoSTD[grep("T0",GC.Data.NoSTD$Sample.Name), c("Sampling.Time")]<-c(0);
GC.Data.NoSTD[grep("T15",GC.Data.NoSTD$Sample.Name), c("Sampling.Time")]<-c(15);
GC.Data.NoSTD[grep("T30",GC.Data.NoSTD$Sample.Name), c("Sampling.Time")]<-c(30);
GC.Data.NoSTD[grep("T45",GC.Data.NoSTD$Sample.Name), c("Sampling.Time")]<-c(45);
### Check if there was any Sampling.Time left with "NONE" label
GC.Data.NoSTD[which(GC.Data.NoSTD$Sampling.Time==9999),];
### Converting experimental designations into factors
GC.Data.NoSTD$Treatment.F<-as.factor(GC.Data.NoSTD$Treatment) ;
GC.Data.NoSTD$BLOCK.F<-as.factor(GC.Data.NoSTD$BLOCK) ;
GC.Data.NoSTD$CoverCrop.F<-as.factor(GC.Data.NoSTD$CoverCrop) ;
###############################################################################################################
#
#                               Exploratory Data visualization
#
###############################################################################################################
str(GC.Data.NoSTD)
levels(GC.Data.NoSTD$Treatment.F)
levels(GC.Data.NoSTD$BLOCK.F)
levels(GC.Data.NoSTD$CoverCrop.F)
GC.Data.NoSTD[GC.Data.NoSTD$CoverCrop.F == "Clover" ,]
xyplot(CO2.ppm ~ Sampling.Time | Treatment.F * BLOCK.F * CoverCrop.F,
data = GC.Data.NoSTD , xlim=c(0,45), ylim = c(0, max(GC.Data.NoSTD$CO2.ppm)) ,
type="o", auto.key = T, main = "CO2");
xyplot(N2O.ppm ~ Sampling.Time | Treatment.F * BLOCK.F * CoverCrop.F,
data = GC.Data.NoSTD , xlim=c(0,45), ylim = c(0, max(GC.Data.NoSTD$N2O.ppm)) ,
type="o", auto.key = T , main = "N2O");
xyplot(CH4.ppm ~ Sampling.Time | Treatment.F * BLOCK.F * CoverCrop.F,
data = GC.Data.NoSTD , xlim=c(0,45), ylim = c(0, max(GC.Data.NoSTD$CH4.ppm)) ,
type="o", auto.key = T , main = "CH4");
###############################################################################################################
#
#  Reference data taken from Allison Kohele's Calculations Excel Files
#
###############################################################################################################
Chamber.Dimensions<-data.frame(DIMENSION=c("Length", "Width" , "Height", "Volume" , "Surface.Area"),UNITS=c("m"), VALUE=c(0.52705, 0.32385, 0.1016, 9999, 9999));
Chamber.Dimensions[Chamber.Dimensions$DIMENSION =="Volume", c("VALUE")]<-Chamber.Dimensions[1,3]*Chamber.Dimensions[2,3]*Chamber.Dimensions[3,3] ;
Chamber.Dimensions[Chamber.Dimensions$DIMENSION =="Surface.Area", c("VALUE")]<-Chamber.Dimensions[1,3]*Chamber.Dimensions[2,3] ;
Molar.Mass<-data.frame(GAS=c("CH4" , "CO2" , "N2O"), UNITS=c("g/mol"), VALUE=c(16.04, 44.01, 44.013));
Gas.Law<-data.frame(UNITS=c("L-atm/Mol-K", "J/K-Mol", "m3-Pa/K-Mol", "Kg-m2-s2/K-Mol", "m3-atm/K-Mol"), VALUE=c(0.08205736, 8.314462,8.314462, 8.314462, 8.205736e-5 ))  ;
###############################################################################################################
#
#  Calculation of flux rates based on the paper:
#
# Pedersen, A. R., S. O. Petersen, and K. Schelde. “A Comprehensive Approach to Soil-Atmosphere Trace-Gas Flux
#
# Estimation with Static Chambers.” European Journal of Soil Science 61, no. 6 (2010): 888–902.
#
# https://doi.org/10.1111/j.1365-2389.2010.01291.x.
#
#
# and the r package :
# Pedersen, Asger R. “HMR: Flux Estimation with Static Chamber Data,” May 20, 2020. https://CRAN.R-project.org/package=HMR.
#
#
###############################################################################################################
str(GC.Data.NoSTD)
unique(GC.Data.NoSTD$Sampling.Day)
##### Test Data ################################################################################################
Test.data.HMR <- GC.Data.NoSTD[GC.Data.NoSTD$Sampling.Day == "20220630" & GC.Data.NoSTD$BLOCK.F == "1" &
GC.Data.NoSTD$Treatment.F == "A" & GC.Data.NoSTD$CoverCrop.F == "3Spp" ,
c( "Sampling.Time" ,  "CO2.ppm" , "N2O.ppm" , "CH4.ppm")] ;
plot(CO2.ppm ~ Sampling.Time, data = Test.data.HMR[1:4,] , col = "red")
plot(N2O.ppm ~ Sampling.Time, data = Test.data.HMR[1:4,] , col = "blue")
plot(CH4.ppm ~ Sampling.Time, data = Test.data.HMR[1:4,] , col = "brown")
Test.data.HMR.CO2 <- Test.data.HMR[,c("Sampling.Time" , "CO2.ppm"  )]
Test.data.HMR.CO2$Series[1:4] <- "S1"
Test.data.HMR.CO2$Series[5:8] <- "S2"
Test.data.HMR.CO2$V <- Chamber.Dimensions[Chamber.Dimensions$DIMENSION == "Volume" , c("VALUE")]
Test.data.HMR.CO2$A <- Chamber.Dimensions[Chamber.Dimensions$DIMENSION == "Surface.Area" , c("VALUE")]
names(Test.data.HMR.CO2)
Test.data.HMR.CO2.1 <- Test.data.HMR.CO2[,c( "Series" , "V" , "A" , "Sampling.Time" , "CO2.ppm")]
names(Test.data.HMR.CO2.1) <- c("Series" , "V" , "A" , "Time" , "Concentration")
setwd("D:/Felipe/Current_Projects/CCC Based Experiments/StrategicTillage_NitrogenLosses_OrganicCoverCrops/DataAnalysis/RCode/GCResultsAnalysis")
write.table(x = Test.data.HMR.CO2.1, sep = ";", dec = "." ,file = "TEST_DATA.csv", row.names = F)
# HRM.Results <- HMR(filename = "TEST_DATA.csv" , Display.Message = F , FollowHMR = T, LR.always = T ,
#
#                 IfNoValidHMR = 'No flux', IfNoFlux = 'No flux', IfNoSignal = 'No flux')
#
HRM.Results <- HMR(filename = "HMRTestData.csv" , sep = "," , dec = "." ,Display.Message = F , FollowHMR = T, LR.always = T ,
IfNoValidHMR = 'No flux', IfNoFlux = 'No flux', IfNoSignal = 'No flux')
xyplot(Concentration ~ Time | Series, data= Test.data.HMR.CO2.1,
panel = function(x, y) { panel.xyplot(x, y)
panel.xyplot(x, y)
panel.abline(lm(y ~ x), col = "BLACK", lwd = 2)
},
type="b",main="Test", auto.key = T)
####### Creating series data names for the HMR analysis ############
str(GC.Data.NoSTD)
unique(GC.Data.NoSTD$Sampling.Date)
unique(GC.Data.NoSTD$Sampling.Day)
# CO2.ppm : Sampling.Day - BLOCK. - CoverCrop.F - Treatment.F
#
# N2O.ppm : Sampling.Day - BLOCK. - CoverCrop.F - Treatment.F
#
# CH4.ppm : Sampling.Day - BLOCK. - CoverCrop.F - Treatment.F
#
# names(Test.data.HMR.CO2.1) <- c("Series" , "V" , "A" , "Time" , "Concentration")
#
# write.table(x = Test.data.HMR.CO2.1, sep = ";", dec = "." ,file = "TEST_DATA.csv", row.names = F)
GC.Data.NoSTD$Series <- paste( GC.Data.NoSTD$Sampling.Day , GC.Data.NoSTD$BLOCK.F ,
GC.Data.NoSTD$CoverCrop.F , GC.Data.NoSTD$Treatment.F, sep = "_") ;
head(GC.Data.NoSTD)
#### there is  duplicated data for a Sample day 20220615, need to get rid of the duplicated data
GC.Data.NoSTD$Series.Sampling.Time <- paste(GC.Data.NoSTD$Series , GC.Data.NoSTD$Sampling.Time , sep = "_" )
str(GC.Data.NoSTD)
duplicated(GC.Data.NoSTD$Series.Sampling.Time)
GC.Data.NoSTD.1 <- GC.Data.NoSTD[ duplicated(GC.Data.NoSTD$Series.Sampling.Time),]
CO2.HRM.Results <- HMR(filename = "CO2.Series.csv" , sep = ";" , dec = "." ,Display.Message = F , FollowHMR = T, LR.always = T ,
IfNoValidHMR = 'No flux', IfNoFlux = 'No flux', IfNoSignal = 'No flux') ;
HRM.Results <- HMR(filename = "HMRTestData.csv" , sep = "," , dec = "." ,Display.Message = F , FollowHMR = T, LR.always = T ,
IfNoValidHMR = 'No flux', IfNoFlux = 'No flux', IfNoSignal = 'No flux')
HRM.Results <- HMR(filename = "HMRTestData.csv" , sep = "," , dec = "." ,Display.Message = F , FollowHMR = F, LR.always = T ,
IfNoValidHMR = 'No flux', IfNoFlux = 'No flux', IfNoSignal = 'No flux')
library(HMR)
install.packages("nlstools",  dependencies = T)
library(nlstools)
HMR.Test.Data <- read.csv(file = paste0("D:\\Felipe\\Current_Projects\\CCC Based Experiments\\",
"StrategicTillage_NitrogenLosses_OrganicCoverCrops\\DataAnalysis\\" ,
"RCode\\GCResultsAnalysis\\HMRTestData.csv"))
xyplot(Concentration ~ Time | Series, data= Test.data.HMR.CO2.1,
panel = function(x, y) { panel.xyplot(x, y)
panel.xyplot(x, y)
panel.abline(lm(y ~ x), col = "BLACK", lwd = 2)
},
type="b",main="Test", auto.key = T)
HMR(filename = "HMRTestData.csv", sep = ",")
formulaExp <- as.formula(VO2 ~ (t <= 5.883) * VO2rest + (t > 5.883) *
(VO2rest + (VO2peak - VO2rest) *
(1 - exp(-(t - 5.883) / mu)))) ;
formulaExp
start = list(VO2rest = 400, VO2peak = 1600, mu = 1)) ;
start = list(VO2rest = 400, VO2peak = 1600, mu = 1)) ;
preview(formulaExp, data = O2K,
start = list(VO2rest = 400, VO2peak = 1600, mu = 1)) ;
O2K.nls1 <- nls(formulaExp, start = list(VO2rest = 400, VO2peak = 1600,
mu = 1), data = O2K)
overview(O2K.nls1)
plotfit(O2K.nls1, smooth = TRUE)
O2K.res1 <- nlsResiduals(O2K.nls1)
plot(O2K.res1)
test.nlsResiduals(O2K.res1)
O2K.cont1 <- nlsContourRSS(O2K.nls1)
O2K.cont1 <- nlsContourRSS(O2K.nls1)
plot(O2K.cont1, col = FALSE, nlev = 5)
O2K.conf1 <- nlsConfRegions(O2K.nls1, exp = 2, length = 2000)
plot(O2K.conf1, bounds = TRUE)
O2K.jack1 <- nlsJack(O2K.nls1)
summary(O2K.jack1)
O2K.boot1 <- nlsBoot(O2K.nls1)
summary(O2K.boot1)
plot(O2K.jack1)
plot(O2K.boot1, type = "boxplot")
newdata <- data.frame(t = seq(0, 12, length.out = 50))
pred.clim <- nlsBootPredict(O2K.boot1, newdata = newdata, interval = "confidence")
plotfit(O2K.nls1, smooth = TRUE)
lines(newdata$t, pred.clim[, 2], col = "red", lty = 2)
lines(newdata$t, pred.clim[, 3], col = "red", lty = 2)
help(HMR,help_type=’html’)
help(HMR)
Model.Equation < - as.formula(Ct ~ (phi - C0)*(1-(exp(-k*t))) + C0) ;
as.formula(Ct ~ (phi - C0)*(1-(exp(-k*t))) + C0)
as.formula(Ct ~ ((phi - C0)*(1-(exp(-k*t))) + C0))
Model.Equation < - as.formula(Ct ~ ((phi - C0)*(1-(exp(-k*t))) + C0)) ;
formulaExp < - as.formula(Ct ~ ((phi - C0)*(1-(exp(-k*t))) + C0)) ;
as.formula(Ct ~ ((phi - C0)*(1-(exp(-k*t))) + C0))
Model.Equation <- as.formula(Ct ~ ((phi - C0)*(1-(exp(-k*t))) + C0)) ;
Model.Equation
HMR.Test.Data <- read.csv(file = paste0("D:\\Felipe\\Current_Projects\\CCC Based Experiments\\",
"StrategicTillage_NitrogenLosses_OrganicCoverCrops\\DataAnalysis\\" ,
"RCode\\GCResultsAnalysis\\HMRTestData.csv"))
str(HMR.Test.Data)
Model.Equation <- as.formula(Concentration ~ ((phi - C0)*(1-(exp(-k*Time))) + C0)) ;
preview(Model.Equation , data = HMR.Test.Data[1:11] , start = list(phi = 90, k = 2))
preview(Model.Equation , data = HMR.Test.Data[1:11,] , start = list(phi = 90, k = 2))
HMR.Test.Data[1:11,]
preview(Model.Equation , data = HMR.Test.Data[1:11, c( "Time" , "Concentration")] , start = list(phi = 90, k = 2))
O2K
HMR.Test.Data[1:11, c( "Time" , "Concentration")]
V = 141
A = 0.562
C0 = 0
preview(Model.Equation , data = HMR.Test.Data[1:11, c( "Time" , "Concentration")] , start = list(phi = 90, k = 2, C0 = 0.01))
HMR(filename = "HMRTestData.csv", sep = ",")
preview(Model.Equation , data = HMR.Test.Data[1:11, c( "Time" , "Concentration")] , start = list(phi = 90, k = 0.02, C0 = 0.01))
plot(Concentration ~ Time , data = HMR.Test.Data[1:11, c( "Time" , "Concentration")])
preview(Model.Equation , data = HMR.Test.Data[1:11, c( "Time" , "Concentration")] , start = list(phi = 20, k = 0.02, C0 = 0.01))
preview(Model.Equation , data = HMR.Test.Data[1:11, c( "Time" , "Concentration")] , start = list(phi = 20, k = 0.02, C0 = 16))
HMR.nls1 <- nls(formula = Model.Equation ,  start = list(phi = 19, k = 0.02, C0 = 15) ,  data = HMR.Test.Data[1:11, c( "Time" , "Concentration")])
overview(HMR.nls1)
plotfit(HMR.nls1)
plotfit(HMR.nls1 , smooth = T)
HMR.res1 <- nlsResiduals(HMR.nls1) ;
plot(HMR.nls1)
plot(HMR.res1)
HMR.cont1 <- nlsContourRSS(HMR.cont1)
HMR.cont1 <- nlsContourRSS(HMR.nls1)
plot(HMR.cont1)
HMR.conf1 <- nlsConfRegions(HMR.nls1, exp = 2, length = 2000)
plot(HMR.conf1, bounds = TRUE)
nlsJack(HMR.nls1 )
nlsBoot(HMR.nls1)
HMR.jack1 <-nlsJack(HMR.nls1 )
HMR.boot1 <- nlsBoot(HMR.nls1)
plot(HMR.jack1)
plot(HMR.boot1)
plot(HMR.boot1, type = "boxplot")
plotfit(HMR.nls1)
pred.HMR <- nlsBootPredict(HMR.boot1 , interval = "confidence")
pred.HMR <- nlsBootPredict(HMR.boot1 , newdata = HMR.Test.Data[1:11, c("Time")],  interval = "confidence")
pred.HMR <- nlsBootPredict(HMR.boot1 , newdata = HMR.Test.Data[1:11, c("Time" , "Concentration")],  interval = "confidence")
lines(HMR.Test.Data[1:11, c("Time")] , pred.HMR[,2] , col = "red" , lty = 2)
lines(HMR.Test.Data[1:11, c("Time")] , pred.HMR[,3] , col = "red" , lty = 2)
,  data = HMR.Test.Data[1:11, c( "Time" , "Concentration")], trace = T);
HMR.nls1 <- nls(formula = Model.Equation ,  start = list(phi = 19, k = 0.02, C0 = 15),
data = HMR.Test.Data[1:11, c( "Time" , "Concentration")], trace = T);
str(HMR.nls1)
trace(HMR.nls1)
HMR.nls1$m$trace()
str(HMR.nls1$m)
HMR.nls1$m$trace
HMR.nls1$m$trace(HMR.nls1)
HMR.nls1$m$trace(getPars)
HMR.nls1$m$getPars()
HMR.nls1 <- nls(formula = Model.Equation ,  start = list(phi = 19, k = 0.02, C0 = 15),
data = HMR.Test.Data[1:11, c( "Time" , "Concentration")], trace = T);
nls()
?nls()
nls()
h = V / A
Model.Equation <- as.formula(Concentration ~ phi+ f0*(exp(-k*Time)/-k*h)) ;
preview(formula = Model.Equation , data = HMR.Test.Data[1:11, c( "Time" , "Concentration")] , start = list(phi = 20))
preview(formula = Model.Equation , data = HMR.Test.Data[1:11, c( "Time" , "Concentration")] )
preview(formula = Model.Equation , data = HMR.Test.Data[1:11, c( "Time" , "Concentration")] )
preview(formula = Model.Equation , data = HMR.Test.Data[1:11, c( "Time" , "Concentration")], start = NA)
h = V / A
h
preview(formula = Model.Equation , data = HMR.Test.Data[1:11, c( "Time" , "Concentration")], start = list(phi = 20 , k = 0.1 , f0 =3))
HMR.Test.Data[1:11, c( "Time" , "Concentration")]
HMR.nls1 <- nls(formula = Model.Equation ,  start = list(phi = 19, k = 0.02, f0 = 15),
data = HMR.Test.Data[1:11, c( "Time" , "Concentration")], trace = T);
preview(formula = Model.Equation , data = HMR.Test.Data[1:11, c( "Time" , "Concentration")], start = list(phi = 20 , k = 0.1 , f0 = 0.003))
Model.Equation <- as.formula(Concentration ~ phi + f0*(exp(-k*Time)/-k*h)) ;
preview(formula = Model.Equation , data = HMR.Test.Data[1:11, c( "Time" , "Concentration")], start = list(phi = 20 , k = 0.1 , f0 = 0.003))
HMR.nls1 <- nls(formula = Model.Equation ,  start = list(phi = 19, k = 0.02, f0 = 15),
data = HMR.Test.Data[1:11, c( "Time" , "Concentration")], trace = T);
Model.Equation <- as.formula(Concentration ~ phi + f0*(exp(-k*Time)/-k*h)) ;
preview(formula = Model.Equation , data = HMR.Test.Data[1:11, c( "Time" , "Concentration")], start = list(phi = 20 , k = 0.1 , f0 = 0.003))
plotfit(HMR.nls1)
Model.Equation <- as.formula(Concentration ~ phi + f0*(exp(-k*Time)/-k*h)) ;
preview(formula = Model.Equation , data = HMR.Test.Data[1:11, c( "Time" , "Concentration")], start = list(phi = 20 , k = 0.1 , f0 = 0.003))
HMR.nls1 <- nls(formula = Model.Equation ,  start = list(phi = 19, k = 0.02, f0 = 15),
data = HMR.Test.Data[1:11, c( "Time" , "Concentration")], trace = T);
HMR.nls1 <- nls(formula = Model.Equation ,  start = list(phi = 19, k = 0.02, f0 = 0.003),
data = HMR.Test.Data[1:11, c( "Time" , "Concentration")], trace = T);
plotfit(HMR.nls1)
overview(HMR.nls1)
plotfit(HMR.nls1 , smooth = T)
HMR.res1 <- nlsResiduals(HMR.nls1) ;
plot(HMR.res1)
HMR.cont1 <- nlsContourRSS(HMR.nls1)
plot(HMR.cont1)
HMR.conf1 <- nlsConfRegions(HMR.nls1, exp = 2, length = 2000)
plot(HMR.conf1, bounds = TRUE)
HMR.jack1 <-nlsJack(HMR.nls1 )
HMR.boot1 <- nlsBoot(HMR.nls1)
plot(HMR.jack1)
plot(HMR.boot1, type = "boxplot")
plotfit(HMR.nls1)
pred.HMR <- nlsBootPredict(HMR.boot1 , newdata = HMR.Test.Data[1:11, c("Time" , "Concentration")],  interval = "confidence")
lines(HMR.Test.Data[1:11, c("Time")] , pred.HMR[,2] , col = "red" , lty = 2)
lines(HMR.Test.Data[1:11, c("Time")] , pred.HMR[,3] , col = "red" , lty = 2)
pred.HMR <- nlsBootPredict(HMR.boot1 , newdata = HMR.Test.Data[1:11, c("Time")],  interval = "confidence")
HMR.boot1 <- nlsBoot(HMR.nls1)
pred.HMR <- nlsBootPredict(HMR.boot1 , newdata = HMR.Test.Data[1:11, c("Time")],  interval = "confidence")
pred.HMR <- nlsBootPredict(HMR.boot1 , newdata = HMR.Test.Data[1:11, c("Time" , "Concentration")],  interval = "confidence")
HMR.boot1 <- nlsBoot(HMR.nls1)
HMR.boot1 <- nlsBoot(HMR.nls1)
str(HMR.Test.Data)
V = 141
A = 0.562
h = V / A
Series.1 <- HMR.Test.Data[1:11, c( "Time" , "Concentration")] ;
plot(Concentration ~ Time , data = Series.1)
Ct = phi + f0(exp(-kt) / -kh )
Model.Equation <- as.formula(Concentration ~ phi + f0*(exp(-k*Time)/-k*h)) ;
Model.Equation
preview(formula = Model.Equation , data = HMR.Test.Data[1:11, c( "Time" , "Concentration")], start = list(phi = 20 , k = 0.1 , f0 = 0.003))
preview(formula = Model.Equation , data = Series.1, start = list(phi = 20 , k = 0.1 , f0 = 0.003))
row.names(Series.1)
Series.1 <- HMR.Test.Data[1:11, c( "Time" , "Concentration")], row.names = F ;
plot(Concentration ~ Time , data = Series.1)
Model.Equation <- as.formula(Concentration ~ phi + f0*(exp(-k*Time)/-k*h)) ;
preview(formula = Model.Equation , data = Series.1, start = list(phi = 20 , k = 0.1 , f0 = 0.003))
HMR.nls1 <- nls(formula = Model.Equation ,  start = list(phi = 19, k = 0.02, f0 = 0.003),
data = Series.1 , trace = T);
plotfit(HMR.nls1)
overview(HMR.nls1)
plotfit(HMR.nls1 , smooth = T)
HMR.res1 <- nlsResiduals(HMR.nls1) ;
plot(HMR.res1)
HMR.cont1 <- nlsContourRSS(HMR.nls1)
plot(HMR.cont1)
HMR.conf1 <- nlsConfRegions(HMR.nls1, exp = 2, length = 2000)
plot(HMR.conf1, bounds = TRUE)
HMR.jack1 <-nlsJack(HMR.nls1 )
HMR.boot1 <- nlsBoot(HMR.nls1)
plot(HMR.jack1)
plot(HMR.boot1, type = "boxplot")
plotfit(HMR.nls1)
pred.HMR <- nlsBootPredict(HMR.boot1 , newdata = HMR.Test.Data[1:11, c("Time" , "Concentration")],  interval = "confidence")
lines(HMR.Test.Data[1:11, c("Time")] , pred.HMR[,2] , col = "red" , lty = 2)
pred.HMR[,2]
library(HMR)
library(nlstools)
library(nlstools)
install.packages("nlstools",  dependencies = T)
install.packages("nlstools", dependencies = T)
library(nlstools)
library(HMR)
HMR.Test.Data <- read.csv(file = paste0("D:\\Felipe\\Current_Projects\\CCC Based Experiments\\",
"StrategicTillage_NitrogenLosses_OrganicCoverCrops\\DataAnalysis\\" ,
"RCode\\GCResultsAnalysis\\HMRTestData.csv"))
"StrategicTillage_NitrogenLosses_OrganicCoverCrops\\DataAnalysis\\" ,
HMR(filename = "HMRTestData.csv", sep = ",")
str(HMR.Test.Data)
V = 141
A = 0.562
h = V / A
Series.1 <- HMR.Test.Data[1:11, c( "Time" , "Concentration")];
plot(Concentration ~ Time , data = Series.1)
Model.Equation <- as.formula(Concentration ~ phi + f0*(exp(-k*Time)/-k*h)) ;
preview(formula = Model.Equation , data = Series.1, start = list(phi = 20 , k = 0.1 , f0 = 0.003))
HMR.nls1 <- nls(formula = Model.Equation ,  start = list(phi = 19, k = 0.02, f0 = 0.003),
data = Series.1 , trace = T);
plotfit(HMR.nls1)
overview(HMR.nls1)
plotfit(HMR.nls1 , smooth = T)
HMR.res1 <- nlsResiduals(HMR.nls1) ;
plot(HMR.res1)
HMR.cont1 <- nlsContourRSS(HMR.nls1)
plot(HMR.cont1)
HMR.conf1 <- nlsConfRegions(HMR.nls1, exp = 2, length = 2000)
plot(HMR.conf1, bounds = TRUE)
HMR.jack1 <-nlsJack(HMR.nls1 )
HMR.boot1 <- nlsBoot(HMR.nls1)
plot(HMR.jack1)
plot(HMR.boot1, type = "boxplot")
plotfit(HMR.nls1)
pred.HMR <- nlsBootPredict(HMR.boot1 , newdata = HMR.Test.Data[1:11, c("Time" , "Concentration")],  interval = "confidence")
lines(HMR.Test.Data[1:11, c("Time")] , pred.HMR[,2] , col = "red" , lty = 2)
lines(HMR.Test.Data[1:11, c("Time")] , pred.HMR[,3] , col = "red" , lty = 2)
pred.HMR <- nlsBootPredict(HMR.boot1 , newdata = Series.1,  interval = "confidence")
HMR.boot1 <- nlsBoot(HMR.nls1)
plot(HMR.boot1, type = "boxplot")
pred.HMR <- nlsBootPredict(HMR.boot1 , newdata = Series.1,  interval = "confidence")
plot(Concentration ~ Time , data = Series.1)
Model.Equation <- as.formula(Concentration ~ phi + f0*(exp(-k*Time)/-k*h)) ;
preview(formula = Model.Equation , data = Series.1, start = list(phi = 20 , k = 0.1 , f0 = 0.003))
HMR.nls1 <- nls(formula = Model.Equation ,  start = list(phi = 19, k = 0.02, f0 = 0.003),
data = Series.1 , trace = T);
plotfit(HMR.nls1)
overview(HMR.nls1)
plotfit(HMR.nls1 , smooth = T)
HMR.res1 <- nlsResiduals(HMR.nls1) ;
k =0.02
plot(Concentration ~ (exp(-k*"Time")/-k*h), data = Series.1)
plot(Concentration ~ (exp(-k*Time)/-k*h), data = Series.1)
Series.1$k <- 0.02
plot(Concentration ~ (exp(-k*Time)/-k*h), data = Series.1)
Series.1$h <- h
V = 141
A = 0.562
h = V / A
Series.1$k <- 0.02
Series.1$k <- 0.02
