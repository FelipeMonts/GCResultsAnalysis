"BT",PeakArea.results$Sample.Name)
grep("BT",PeakArea.results$Sample.Name)
grep("CT",PeakArea.results$Sample.Name)
grep("DT",PeakArea.results$Sample.Name)
PeakArea.results[which(PeakArea.results$Treatment == "NONE"), ];
PeakArea.results[which(PeakArea.results$Treatment == "NONE"), c("Treatment") ] <- c("Standard") ;
PeakArea.results[51,c("Treatment")]<-c("C");
PeakArea.results[51,c("Treatment")]
PeakArea.results$Treatment<-c("NONE");
PeakArea.results[grep("AT",PeakArea.results$Sample.Name), c("Treatment")]<-c("A");
PeakArea.results[grep("BT",PeakArea.results$Sample.Name), c("Treatment")]<-c("B");
PeakArea.results[grep("CT",PeakArea.results$Sample.Name), c("Treatment")]<-c("C");
PeakArea.results[grep("DT",PeakArea.results$Sample.Name), c("Treatment")]<-c("D");
### Check if there was any treatment left with "NONE" label
PeakArea.results[which(PeakArea.results$Treatment == "NONE"), ];
#### Treatments labeled "NONE" are standards
PeakArea.results[which(PeakArea.results$Treatment == "NONE"), c("Treatment") ] <- c("Standard") ;
PeakArea.results[51,c("Treatment")]
grep("B1",PeakArea.results$Sample.Name)
PeakArea.results$BLOCK<-c(9999);
PeakArea.results[grep("B1",PeakArea.results$Sample.Name), c("BLOCK")]<-c(1);
PeakArea.results[grep("B2",PeakArea.results$Sample.Name), c("BLOCK")]<-c(2);
PeakArea.results[grep("B3",PeakArea.results$Sample.Name), c("BLOCK")]<-c(3);
PeakArea.results[grep("B4",PeakArea.results$Sample.Name), c("BLOCK")]<-c(4);
PeakArea.results[which(PeakArea.results$BLOCK == 9999 ), ];
PeakArea.results[which(PeakArea.results$BLOCK == 9999 ), ] <- c("Standard") ;
PeakArea.results[which(PeakArea.results$BLOCK == 9999 ), ];
grep("3Spp",PeakArea.results$Sample.Name)
PeakArea.results$CoverCrop<-c("NONE");
PeakArea.results[grep("3Spp",PeakArea.results$Sample.Name), c("CoverCrop")]<-c("3Spp");
PeakArea.results[grep("Clover",PeakArea.results$Sample.Name), c("CoverCrop")]<-c("Clover");
PeakArea.results[grep("Trit",PeakArea.results$Sample.Name), c("CoverCrop")]<-c("Trit");
PeakArea.results$CoverCrop<-c("NONE");
PeakArea.results[grep("3Spp",PeakArea.results$Sample.Name), c("CoverCrop")]<-c("3Spp");
PeakArea.results[grep("Clover",PeakArea.results$Sample.Name), c("CoverCrop")]<-c("Clover");
PeakArea.results[grep("Trit",PeakArea.results$Sample.Name), c("CoverCrop")]<-c("Trit");
PeakArea.results[which(PeakArea.results$CoverCrop == "NONE" ), ];
str(PeakArea.results)
unique(PeakArea.results$Sample.Name)
PeakArea.results$Treatment<-c("NONE");
str(PeakArea.results)
psu kanopy
##############################################################################################################
#
#
# Program to Analyze and plot GC data collected from Professor Lauren McPhillips Agilent 8890 Gas Chromatograph
#
#     This program is focused on analyzing standards for calibration
#
#
#  Felipe Montes 2022/08/23
#
#
#
#
###############################################################################################################
###############################################################################################################
#                             Tell the program where the package libraries are stored
###############################################################################################################
.libPaths("C:\\Users\\frm10\\AppData\\Local\\R\\win-library\\4.2")  ;
###############################################################################################################
#                            Install the packages that are needed
###############################################################################################################
# install.packages("openxlsx",  dependencies = T)
# install.packages("Rtools",  dependencies = T)
# install.packages("pdftools",  dependencies = T)
# install.packages("askpass",  dependencies = T)
# install.packages("cli",  dependencies = T)
# install.packages("utf8",  dependencies = T)
# install.packages("quantreg",  dependencies = T)
###############################################################################################################
#                           load the libraries that are needed
###############################################################################################################
library(openxlsx)
library(lattice)
library(pdftools)
library(stringr)
library(quantreg)
###############################################################################################################
#                             Setting up working directory  Loading Packages and Setting up working directory
###############################################################################################################
#      set the working directory
# readClipboard()
# setwd("D:\\Felipe\\CCC Based Experiments\\StrategicTillage_NitrogenLosses_OrganicCoverCrops\\Data\\GasChromatograph")
###############################################################################################################
#                           Explore the files and directory and files with the data
###############################################################################################################
### Read the Directories where the GC data are stored
File.List.directory.path <- "C:\\Users\\frm10\\OneDrive - The Pennsylvania State University\\GCResults\\Felipe2022\\Results" ;
File.List.directory <- list.files(File.List.directory.path); length(File.List.directory) ;
File.List.Sub.directory <- list.files(paste0(File.List.directory.path , "\\" ,File.List.directory [[1]] )); length(File.List.Sub.directory) ;
Summary.directory <- grep("Sum", File.List.Sub.directory, value = T) ;
###############################################################################################################
#                           Read all the GC result reports in the File.List
###############################################################################################################
## initialize the dataframe to collect all the data in the directory files in the Excel.Results.Files
PeakArea.results.0<-data.frame(Sample.Name = character(), Position = integer() , Vial.number = integer(),
CH4.Area = double(), CO2.Area = double(), N2O.Area = double(), File = character(),
Sampling.Day = character(),  DateOfAnalysis = character(), AnalysisName = character() );
PeakArea.results <- read.csv(file = "C:\\Users\\frm10\\OneDrive - The Pennsylvania State University\\Analysis\\GCcompiledResults2022.csv" , header = T)
str(PeakArea.results)
GC.standards <- PeakArea.results[grep( pattern = "B" , x = PeakArea.results$Sample.Name, invert = T) ,] ;
str(GC.standards)
GC.standards$Factor.Name <- as.factor(GC.standards$Sample.Name) ;
str(GC.standards$Sample.Name)
str(GC.standards$Factor.Name)
levels(GC.standards$Factor.Name)
GC.standards$CH4.ppm <- NaN
GC.standards$CO2.ppm <- NaN
GC.standards$N2O.ppm <- NaN
head(GC.standards);
GC.standards[GC.standards$Sample.Name == 'L100',c('CH4.ppm')] <- 5 ;
GC.standards[GC.standards$Sample.Name == 'L100',c('CO2.ppm')] <- 500 ;
GC.standards[GC.standards$Sample.Name == 'L100',c('N2O.ppm')] <- 1 ;
GC.standards[GC.standards$Sample.Name == 'H100',c('CH4.ppm')] <- 50 ;
GC.standards[GC.standards$Sample.Name == 'H100',c('CO2.ppm')] <- 5000 ;
GC.standards[GC.standards$Sample.Name == 'H100',c('N2O.ppm')] <- 50 ;
GC.standards[GC.standards$Sample.Name == 'L50',c('CH4.ppm')]<-2.5  ;
GC.standards[GC.standards$Sample.Name == 'L50',c('CO2.ppm')]<-250  ;
GC.standards[GC.standards$Sample.Name == 'L50',c('N2O.ppm')]<-0.5  ;
GC.standards[GC.standards$Sample.Name == 'H50',c('CH4.ppm')]<-25 ;
GC.standards[GC.standards$Sample.Name == 'H50',c('CO2.ppm')]<-2500 ;
GC.standards[GC.standards$Sample.Name == 'H50',c('N2O.ppm')]<-25;
GC.standards[GC.standards$Sample.Name == '75PerSTDA',c('CH4.ppm')]<-3.75 ;
GC.standards[GC.standards$Sample.Name == '75PerSTDA',c('CO2.ppm')]<-375  ;
GC.standards[GC.standards$Sample.Name == '75PerSTDA',c('N2O.ppm')]<-0.75 ;
GC.standards[GC.standards$Sample.Name == 'L25',c('CH4.ppm')]<-1.25 ;
GC.standards[GC.standards$Sample.Name == 'L25',c('CO2.ppm')]<-125  ;
GC.standards[GC.standards$Sample.Name == 'L25',c('N2O.ppm')]<-0.25  ;
GC.standards[GC.standards$Sample.Name == '0',c('CH4.ppm', 'CO2.ppm', 'N2O.ppm')]<-1e-5 ;
GC.standards$ANAL.DATE<-as.factor(GC.standards$GC.Date)  ;
xyplot(CO2 ~ CO2.ppm, groups = GC.Date, data=GC.standards, type="b", main="CO2", auto.key = T)
xyplot(CO2 ~ CO2.ppm | GC.Date , groups = Position , data=GC.standards, type="p",main="CO2", auto.key = T)
simpleKey(text = GC.standards$Position )
str(GC.standards)
plot(CO2 ~ CO2.ppm, data = GC.standards[GC.standards$Factor.Name == "0" ,  ])
boxplot(CO2 ~ ANAL.DATE , data = GC.standards[GC.standards$Factor.Name == "0" ,  ]  )
boxplot(CH4 ~ ANAL.DATE , data = GC.standards[GC.standards$Factor.Name == "0" ,  ]  )
boxplot(N2O ~ ANAL.DATE , data = GC.standards[GC.standards$Factor.Name == "0" ,  ]  )
plot(CO2 ~ CO2.ppm, data = GC.standards[GC.standards$Factor.Name == "L25" ,  ])
boxplot(CO2 ~ ANAL.DATE, data = GC.standards[GC.standards$Factor.Name == "L25" ,  ]  )
plot(CO2 ~ CO2.ppm, data = GC.standards[GC.standards$Factor.Name == "L50" ,  ])
boxplot(CO2 ~ ANAL.DATE, data = GC.standards[GC.standards$Factor.Name == "L50" ,  ]  )
plot(CO2 ~ CO2.ppm, data = GC.standards[GC.standards$Factor.Name == "L100" ,  ])
boxplot(CO2 ~ ANAL.DATE, data = GC.standards[GC.standards$Factor.Name == "L100" ,  ]  )
plot(CO2 ~ CO2.ppm, data = GC.standards[GC.standards$Factor.Name == "H50" ,  ])
boxplot(CO2 ~ ANAL.DATE, data = GC.standards[GC.standards$Factor.Name == "H50" ,  ]  )
plot(CO2 ~ CO2.ppm, data = GC.standards[GC.standards$Factor.Name == "H100" ,  ])
boxplot(CO2 ~ ANAL.DATE, data = GC.standards[GC.standards$Factor.Name == "H100" ,  ]  )
boxplot(CH4 ~ ANAL.DATE, data = GC.standards[GC.standards$Factor.Name == "H100" ,  ]  )
boxplot(N2O ~ ANAL.DATE, data = GC.standards[GC.standards$Factor.Name == "H100" ,  ]  )
xyplot(N2O~N2O.ppm, data=GC.standards, type="p",main="N2O")
xyplot(CH4~CH4.ppm, data=GC.standards, type="b",main="CH4")
xyplot(CO2 ~ CO2.ppm, data=GC.standards, type="p",main="CO2")
xyplot(CH4 ~ CH4.ppm, data=GC.standards, type="p",main="CH4")
xyplot(N2O ~ N2O.ppm, data=GC.standards, type="p",main="N2O")
GC.standards$Series <- "None" ;
GC.standards[GC.standards$Position %in% c(1:5), c("Series")] <- 1 ;
GC.standards[GC.standards$Position %in% c(30:34), c("Series")] <- 2 ;
GC.standards[GC.standards$Position %in% c(51:55), c("Series")] <- 3 ;
GC.standards[GC.standards$Position %in% c(80:84), c("Series")] <- 4 ;
GC.standards[GC.standards$Position %in% c(101:105), c("Series")] <- 5 ;
head(GC.standards)
GC.standards$Series <- as.factor(GC.standards$Series) ;
str(GC.standards)
xyplot(CO2 ~ CO2.ppm | GC.Date , groups = Series , data=GC.standards,
type="b",main="CO2", auto.key = T, col = c("BLACK" , "RED" , "BLUE", "CYAN", "MAGENTA"),  lwd=3);
xyplot(CH4 ~ CH4.ppm | GC.Date , groups = Series , data=GC.standards,
type="b",main="CH4", auto.key = T, col = c("BLACK" , "RED" , "BLUE", "CYAN", "MAGENTA"),  lwd=3);
xyplot(N2O ~ N2O.ppm | GC.Date , groups = Series , data=GC.standards,
type="b",main="N2O", auto.key = T, col = c("BLACK" , "RED" , "BLUE", "CYAN", "MAGENTA"),  lwd=3);
levels(GC.standards$Factor.Name)
plot(CO2.ppm ~ CO2, data = GC.standards[GC.standards$Series == "1" & GC.standards$GC.Date == "2022-09-02",] )
lm(CO2.ppm ~ CO2, data = GC.standards[GC.standards$Series == "1" & GC.standards$GC.Date == "2022-09-02",] )
str(lm(CO2.ppm ~ CO2, data = GC.standards[GC.standards$Series == "1" & GC.standards$GC.Date == "2022-09-02",] ))
by(data = GC.standards, INDICES = GC.standards[, c("ANAL.DATE" , "Series")], function(x) lm(CO2.ppm ~ CO2, data = x))
xyplot(N2O.ppm ~ N2O | GC.Date , groups = Series , data=GC.standards,
panel = function(x, y) { panel.xyplot(x, y)
panel.xyplot(x, y)
panel.abline(lm(y ~ x))
panel.text(3000, 30,labels = signif(lm(y ~ x)$coefficients[2], digits = 3))
panel.abline(a= 30, b=0, col="RED")
},
type="b",main="N2O", auto.key = T, col = c("BLACK" , "RED" , "BLUE", "CYAN", "MAGENTA"),  lwd=3)
str(GC.standards)
levels(GC.standards$ANAL.DATE)[[1]]
GC.standards[GC.standards$ANAL.DATE == levels(GC.standards$ANAL.DATE)[[8]], ]
plot(CO2~CO2.ppm, data = GC.standards[GC.standards$ANAL.DATE == levels(GC.standards$ANAL.DATE)[[8]], ], col= "blue") ;
OLS.regression <- lm(CO2~CO2.ppm, data = GC.standards[GC.standards$ANAL.DATE == levels(GC.standards$ANAL.DATE)[[8]], ] ) ;
summary(OLS.regression)
str(OLS.regression)
OLS.regression$coefficients[[1]]
abline(a = OLS.regression$coefficients[[1]], b = OLS.regression$coefficients[[2]] , col="red")
Quantile.Reg <- rq( CO2~CO2.ppm, data = GC.standards[GC.standards$ANAL.DATE == levels(GC.standards$ANAL.DATE)[[8]], ], tau = c(0.25, 0.50, 0.75) )
summary(Quantile.Reg)
str(Quantile.Reg)
abline(a = Quantile.Reg$coefficients[1,1], b = Quantile.Reg$coefficients[2,1] , col="cyan")
abline(a = Quantile.Reg$coefficients[1,2], b = Quantile.Reg$coefficients[2,2] , col="green")
abline(a = Quantile.Reg$coefficients[1,3], b = Quantile.Reg$coefficients[2,3] , col="magenta")
xyplot(CO2 ~ CO2.ppm | GC.Date , groups = Series , data=GC.standards,
type="b",main="CO2", auto.key = T, col = c("BLACK" , "RED" , "BLUE", "CYAN", "MAGENTA"),  lwd=3);
xyplot(CO2.ppm ~ CO2 | GC.Date , groups = Series , data=GC.standards,
panel = function(x, y) { panel.xyplot(x, y)
panel.xyplot(x, y)
panel.abline(lm(y ~ x), col = "BLACK", lwd = 2)
panel.abline(rq(y ~ x), col="RED" , lwd = 2)
panel.text(10000, 4000,labels = signif(rq(y ~ x)$coefficients[2], digits = 3), col = "red")
panel.text(10000, 3500,labels = signif(rq(y ~ x)$coefficients[1], digits = 3), col = "red")
panel.text(20000, 2000,labels = signif(lm(y ~ x)$coefficients[1], digits = 3), col = 'black' )
panel.text(20000, 2500,labels = signif(lm(y ~ x)$coefficients[2], digits = 3), col = 'black' )
},
type="b",main="CO2", auto.key = T)
xyplot(CO2.ppm ~ CO2 , data=GC.standards,
panel = function(x, y) { panel.xyplot(x, y)
panel.xyplot(x, y)
panel.abline(lm(y ~ x), col = "BLACK", lwd = 2)
panel.abline(rq(y ~ x), col="RED" , lwd = 2)
panel.text(10000, 4000,labels = signif(rq(y ~ x)$coefficients[2], digits = 3), col = "red")
panel.text(10000, 3500,labels = signif(rq(y ~ x)$coefficients[1], digits = 3), col = "red")
panel.text(20000, 2000,labels = signif(lm(y ~ x)$coefficients[1], digits = 3), col = 'black' )
panel.text(20000, 2500,labels = signif(lm(y ~ x)$coefficients[2], digits = 3), col = 'black' )
},
type="b",main="N2O", auto.key = T)
xyplot(N2O.ppm ~ N2O | GC.Date , groups = Series , data=GC.standards,
panel = function(x, y) { panel.xyplot(x, y)
panel.xyplot(x, y)
panel.abline(lm(y ~ x), col = "BLACK", lwd = 2)
panel.abline(rq(y ~ x), col="RED" , lwd = 2)
panel.text(10000, 40,labels = signif(rq(y ~ x)$coefficients[2], digits = 3), col = "red")
panel.text(10000, 35,labels = signif(rq(y ~ x)$coefficients[1], digits = 3), col = "red")
panel.text(20000, 20,labels = signif(lm(y ~ x)$coefficients[1], digits = 3), col = 'black' )
panel.text(20000, 25,labels = signif(lm(y ~ x)$coefficients[2], digits = 3), col = 'black' )
},
type="b",main="N2O", auto.key = T)
xyplot(N2O.ppm ~ N2O , data=GC.standards,
panel = function(x, y) { panel.xyplot(x, y)
panel.xyplot(x, y)
panel.abline(lm(y ~ x), col = "BLACK", lwd = 2)
panel.abline(rq(y ~ x), col="RED" , lwd = 2)
panel.text(10000, 40,labels = signif(rq(y ~ x)$coefficients[2], digits = 3), col = "red")
panel.text(10000, 35,labels = signif(rq(y ~ x)$coefficients[1], digits = 3), col = "red")
panel.text(20000, 20,labels = signif(lm(y ~ x)$coefficients[1], digits = 3), col = 'black' )
panel.text(20000, 25,labels = signif(lm(y ~ x)$coefficients[2], digits = 3), col = 'black' )
},
type="b",main="N2O", auto.key = T)
xyplot(CH4.ppm ~ CH4 | GC.Date , groups = Series , data=GC.standards,
panel = function(x, y) { panel.xyplot(x, y)
panel.xyplot(x, y)
panel.abline(lm(y ~ x), col = "BLACK", lwd = 2)
panel.abline(rq(y ~ x), col="RED" , lwd = 2)
panel.text(200, 40,labels = signif(rq(y ~ x)$coefficients[2], digits = 3), col = "red")
panel.text(200, 35,labels = signif(rq(y ~ x)$coefficients[1], digits = 3), col = "red")
panel.text(400, 20,labels = signif(lm(y ~ x)$coefficients[1], digits = 3), col = 'black' )
panel.text(400, 25,labels = signif(lm(y ~ x)$coefficients[2], digits = 3), col = 'black' )
},
type="b",main="CH4", auto.key = T)
xyplot(CH4.ppm ~ CH4 , data=GC.standards,
panel = function(x, y) { panel.xyplot(x, y)
panel.xyplot(x, y)
panel.abline(lm(y ~ x), col = "BLACK", lwd = 2)
panel.abline(rq(y ~ x), col="RED" , lwd = 2)
panel.text(200, 40,labels = signif(rq(y ~ x)$coefficients[2], digits = 3), col = "red")
panel.text(200, 35,labels = signif(rq(y ~ x)$coefficients[1], digits = 3), col = "red")
panel.text(400, 20,labels = signif(lm(y ~ x)$coefficients[1], digits = 3), col = 'black' )
panel.text(400, 25,labels = signif(lm(y ~ x)$coefficients[2], digits = 3), col = 'black' )
},
type="b",main="CH4", auto.key = T)
CO2.Calibration <- lm(CO2.ppm ~ CO2 , data = GC.standards) ;
summary(CO2.Calibration)
N2O.Calibration <- lm(N2O.ppm ~ N2O , data = GC.standards) ;
summary(N2O.Calibration)
CH4.Calibration <- lm(CH4.ppm ~ CH4 , data = GC.standards) ;
summary(CH4.Calibration)
str(GC.standards)
str(PeakArea.results)
levels(GC.standards$Factor.Name)
GC.Data.NoSTD<-PeakArea.results[!(PeakArea.results$Sample.Name %in% levels(GC.standards$Factor.Name)),];
str(GC.Data.NoSTD)
plot.CH4.hist.dat<-hist(GC.Data.NoSTD$CH4)
plot.CH4.density.dat<-density(GC.Data.NoSTD$CH4, na.rm=T)
plot.CO2.hist.dat<-hist(GC.Data.NoSTD$CO2)
plot.CO2.density.dat<-density(GC.Data.NoSTD$CO2, na.rm=T)
plot.N2O.hist.dat<-hist(GC.Data.NoSTD$N2O)
plot.N2O.density.dat<-density(GC.Data.NoSTD$N2O, na.rm=T)
plot.CH4.hist.STD<-hist(GC.standards$CH4)
plot.CH4.density.STD<-density(GC.standards$CH4, na.rm=T)
plot(plot.CH4.hist.STD, col="RED" )
plot(plot.CH4.hist.dat, col="BLUE" ,add=T)
plot(plot.CH4.density.STD, col="RED")
lines(plot.CH4.density.dat, col="BLUE")
plot.CO2.hist.STD<-hist(GC.standards$CO2)
plot.CO2.density.STD<-density(GC.standards$CO2, na.rm=T)
plot(plot.CO2.hist.STD, col="RED" )
plot(plot.CO2.hist.dat, col="BLUE" ,add=T)
plot(plot.CO2.hist.STD, col="RED", add=T )
plot(plot.CO2.density.STD, col="RED")
lines(plot.CO2.density.dat, col="BLUE")
plot.N2O.hist.STD<-hist(GC.standards$N2O)
plot.N2O.density.STD<-density(GC.standards$N2O, na.rm=T)
plot.CH4.hist.dat<-hist(GC.Data.NoSTD$CH4)
plot.CH4.density.dat<-density(GC.Data.NoSTD$CH4, na.rm=T)
plot.CO2.hist.dat<-hist(GC.Data.NoSTD$CO2)
plot.CO2.density.dat<-density(GC.Data.NoSTD$CO2, na.rm=T)
plot.N2O.hist.dat<-hist(GC.Data.NoSTD$N2O)
str(GC.Data.NoSTD)
unique(GC.Data.NoSTD$Sample.Name)
GC.Data.NoSTD[grep("AT",GC.Data.NoSTD$Sample.Name), c("Treatment")]<-c("A");
GC.Data.NoSTD$Treatment<-c("NONE");
GC.Data.NoSTD[grep("AT",GC.Data.NoSTD$Sample.Name), c("Treatment")]<-c("A");
GC.Data.NoSTD[grep("AT",GC.Data.NoSTD$Sample.Name), c("Treatment")]<-c("A");
GC.Data.NoSTD[grep("BT",GC.Data.NoSTD$Sample.Name), c("Treatment")]<-c("B");
GC.Data.NoSTD[grep("DT",GC.Data.NoSTD$Sample.Name), c("Treatment")]<-c("D");
GC.Data.NoSTD[which(GC.Data.NoSTD$Treatment == "NONE"), ];
str(GC.Data.NoSTD)
unique(GC.Data.NoSTD$Sample.Name)
GC.Data.NoSTD$Treatment<-c("NONE");
str(GC.Data.NoSTD)
grep("AT",GC.Data.NoSTD$Sample.Name)
GC.Data.NoSTD[grep("AT",GC.Data.NoSTD$Sample.Name), c("Treatment")]<-c("A");
GC.Data.NoSTD[grep("AT",GC.Data.NoSTD$Sample.Name), c("Treatment")]
GC.Data.NoSTD[grep("BT",GC.Data.NoSTD$Sample.Name), c("Treatment")]<-c("B");
GC.Data.NoSTD[grep("BT",GC.Data.NoSTD$Sample.Name), c("Treatment")]
GC.Data.NoSTD[grep("CT",GC.Data.NoSTD$Sample.Name), c("Treatment")]<-c("C");
GC.Data.NoSTD[grep("DT",GC.Data.NoSTD$Sample.Name), c("Treatment")]<-c("D");
GC.Data.NoSTD[which(GC.Data.NoSTD$Treatment == "NONE"), ];
grep("B1",GC.Data.NoSTD$Sample.Name)
GC.Data.NoSTD$BLOCK<-c(9999);
GC.Data.NoSTD[grep("B1",GC.Data.NoSTD$Sample.Name), c("BLOCK")]<-c(1);
str(GC.standards)
str(PeakArea.results)
levels(GC.standards$Factor.Name)
GC.Data.NoSTD<-PeakArea.results[!(PeakArea.results$Sample.Name %in% levels(GC.standards$Factor.Name)),];
str(GC.Data.NoSTD)
plot.CH4.hist.dat<-hist(GC.Data.NoSTD$CH4)
plot.CH4.density.dat<-density(GC.Data.NoSTD$CH4, na.rm=T)
plot.CO2.hist.dat<-hist(GC.Data.NoSTD$CO2)
plot.CO2.density.dat<-density(GC.Data.NoSTD$CO2, na.rm=T)
plot.N2O.hist.dat<-hist(GC.Data.NoSTD$N2O)
plot.N2O.density.dat<-density(GC.Data.NoSTD$N2O, na.rm=T)
str(GC.Data.NoSTD)
unique(GC.Data.NoSTD$Sample.Name)
GC.Data.NoSTD$Treatment<-c("NONE");
GC.Data.NoSTD[grep("AT",GC.Data.NoSTD$Sample.Name), c("Treatment")]<-c("A");
GC.Data.NoSTD[grep("BT",GC.Data.NoSTD$Sample.Name), c("Treatment")]<-c("B");
GC.Data.NoSTD[grep("CT",GC.Data.NoSTD$Sample.Name), c("Treatment")]<-c("C");
GC.Data.NoSTD[grep("DT",GC.Data.NoSTD$Sample.Name), c("Treatment")]<-c("D");
GC.Data.NoSTD[which(GC.Data.NoSTD$Treatment == "NONE"), ];
grep("B1",GC.Data.NoSTD$Sample.Name)
GC.Data.NoSTD$BLOCK<-c(9999);
GC.Data.NoSTD[grep("B1",GC.Data.NoSTD$Sample.Name), c("BLOCK")]<-c(1);
GC.Data.NoSTD[grep("B2",GC.Data.NoSTD$Sample.Name), c("BLOCK")]<-c(2);
GC.Data.NoSTD[grep("B3",GC.Data.NoSTD$Sample.Name), c("BLOCK")]<-c(3);
GC.Data.NoSTD[grep("B4",GC.Data.NoSTD$Sample.Name), c("BLOCK")]<-c(4);
GC.Data.NoSTD[which(GC.Data.NoSTD$BLOCK == 9999 ), ];
GC.Data.NoSTD[which(GC.Data.NoSTD$BLOCK == 9999 ), ] <- c("Standard") ;
grep("3Spp",GC.Data.NoSTD$Sample.Name)
GC.Data.NoSTD[which(GC.Data.NoSTD$BLOCK == 9999 ), ];
grep("3Spp",GC.Data.NoSTD$Sample.Name)
GC.Data.NoSTD$CoverCrop<-c("NONE");
GC.Data.NoSTD[grep("3Spp",GC.Data.NoSTD$Sample.Name), c("CoverCrop")]<-c("3Spp");
GC.Data.NoSTD[grep("Clover",GC.Data.NoSTD$Sample.Name), c("CoverCrop")]<-c("Clover");
GC.Data.NoSTD[grep("Trit",GC.Data.NoSTD$Sample.Name), c("CoverCrop")]<-c("Trit");
GC.Data.NoSTD[which(GC.Data.NoSTD$CoverCrop == "NONE" ), ];
grep("T0",GC.Data.NoSTD$Sample.Name)
GC.Data.NoSTD$Sampling.Time<-c(9999);
GC.Data.NoSTD[grep("T0",GC.Data.NoSTD$Sample.Name), c("Sampling.Time")]<-c(0);
GC.Data.NoSTD[grep("T15",GC.Data.NoSTD$Sample.Name), c("Sampling.Time")]<-c(15);
GC.Data.NoSTD[grep("T30",GC.Data.NoSTD$Sample.Name), c("Sampling.Time")]<-c(30);
GC.Data.NoSTD[grep("T45",GC.Data.NoSTD$Sample.Name), c("Sampling.Time")]<-c(45);
GC.Data.NoSTD[which(GC.Data.NoSTD$Sampling.Time==9999),];
GC.Data.NoSTD[which(GC.Data.NoSTD$Sampling.Time==9999),];
GC.Data.NoSTD$Treatment.F<-as.factor(GC.Data.NoSTD$Treatment) ;
GC.Data.NoSTD$BLOCK.F<-as.factor(GC.Data.NoSTD$BLOCK) ;
GC.Data.NoSTD$CoverCrop.F<-as.factor(GC.Data.NoSTD$CoverCrop) ;
str(GC.Data.NoSTD)
str(GC.Data.NoSTD)
xyplot(CH4 + N2O + CO2 ~ Sampling.Time | Treatment.F * BLOCK.F * CoverCrop.F, data = GC.Data.NoSTD ,xlim=c(0,45), type="o", auto.key = T);
str(GC.Data.NoSTD)
levels(GC.Data.NoSTD$Treatment)
levels(GC.Data.NoSTD$Treatment.F)
levels(GC.Data.NoSTD$Sampling.Time)
levels(GC.Data.NoSTD$BLOCK.F)
levels(GC.Data.NoSTD$CoverCrop.F)
GC.Data.NoSTD[GC.Data.NoSTD$CoverCrop.F == "Clover" ,]
xyplot(CH4  ~ Sampling.Time | Treatment.F * BLOCK.F * CoverCrop.F, data = GC.Data.NoSTD , xlim=c(0,45), type="o", auto.key = T);
xyplot(CH4  ~ Sampling.Time | Treatment.F + BLOCK.F + CoverCrop.F, data = GC.Data.NoSTD , xlim=c(0,45), type="o", auto.key = T);
xyplot(CH4 + N2O + CO2 ~ Sampling.Time | Treatment.F * BLOCK.F * CoverCrop.F, data = GC.Data.NoSTD , xlim=c(0,45), type="o", auto.key = T);
str(GC.Data.NoSTD)
str(GC.Data.NoSTD)
GC.Data.NoSTD$L.R.Intercept <- 0 ;
GC.Data.NoSTD$L.R.Slope<- 0 ;
drop(GC.Data.NoSTD$L.R.Intercept , GC.Data.NoSTD$L.R.Slope)
GC.Data.NoSTD<-PeakArea.results[!(PeakArea.results$Sample.Name %in% levels(GC.standards$Factor.Name)),];
str(GC.Data.NoSTD)
coefficients(CO2.Calibration)
coefficients(CO2.Calibration)[1]
coefficients(CO2.Calibration)[2] ;
GC.Data.NoSTD$CO2.Intercept <- coefficients(CO2.Calibration)[1] ;
GC.Data.NoSTD$CO2.Slope <- coefficients(CO2.Calibration)[2] ;
GC.Data.NoSTD$CO2.ppm <- (GC.Data.NoSTD$CO2 * GC.Data.NoSTD$CO2.Slope) + GC.Data.NoSTD$CO2.Intercept ;
GC.Data.NoSTD$N2O.Intercept <- coefficients(N2O.Calibration)[1] ;
coefficients(N2O.Calibration)[1]
coefficients(N2O.Calibration)[2]
GC.Data.NoSTD$N2O.ppm <- (GC.Data.NoSTD$N2O * GC.Data.NoSTD$N2O.Slope) + GC.Data.NoSTD$N2O.Intercept ;
GC.Data.NoSTD$N2O.ppm <- (GC.Data.NoSTD$N2O * GC.Data.NoSTD$N2O.Slope) + GC.Data.NoSTD$N2O.Intercept ;
GC.Data.NoSTD$N2O
GC.Data.NoSTD$N2O.Slope
coefficients(N2O.Calibration)
coefficients(N2O.Calibration
)
GC.Data.NoSTD$N2O
GC.Data.NoSTD$N2O.Slope
GC.Data.NoSTD$N2O.Slope <- coefficients(N2O.Calibration)[2] ;
GC.Data.NoSTD$N2O.Slope
GC.Data.NoSTD$N2O.ppm <- (GC.Data.NoSTD$N2O * GC.Data.NoSTD$N2O.Slope) + GC.Data.NoSTD$N2O.Intercept ;
GC.Data.NoSTD$CH4.Intercept <- coefficients(CH4.Calibration)[1] ;
coefficients(CH4.Calibration)
GC.Data.NoSTD$CH4.Slope <- coefficients(CH4.Calibration)[2] ;
GC.Data.NoSTD$CH4.ppm <- (GC.Data.NoSTD$CH4 * GC.Data.NoSTD$CH4.Slope) + GC.Data.NoSTD$CH4.Intercept ;
str(GC.Data.NoSTD)
unique(GC.Data.NoSTD$Sample.Name)
GC.Data.NoSTD$Treatment<-c("NONE");
GC.Data.NoSTD[grep("AT",GC.Data.NoSTD$Sample.Name), c("Treatment")]<-c("A");
GC.Data.NoSTD[grep("BT",GC.Data.NoSTD$Sample.Name), c("Treatment")]<-c("B");
GC.Data.NoSTD[grep("CT",GC.Data.NoSTD$Sample.Name), c("Treatment")]<-c("C");
GC.Data.NoSTD[grep("DT",GC.Data.NoSTD$Sample.Name), c("Treatment")]<-c("D");
GC.Data.NoSTD[which(GC.Data.NoSTD$Treatment == "NONE"), ];
grep("B1",GC.Data.NoSTD$Sample.Name)
GC.Data.NoSTD$BLOCK<-c(9999);
GC.Data.NoSTD[grep("B1",GC.Data.NoSTD$Sample.Name), c("BLOCK")]<-c(1);
GC.Data.NoSTD[grep("B2",GC.Data.NoSTD$Sample.Name), c("BLOCK")]<-c(2);
GC.Data.NoSTD[grep("B3",GC.Data.NoSTD$Sample.Name), c("BLOCK")]<-c(3);
GC.Data.NoSTD[grep("B4",GC.Data.NoSTD$Sample.Name), c("BLOCK")]<-c(4);
GC.Data.NoSTD[which(GC.Data.NoSTD$BLOCK == 9999 ), ];
grep("3Spp",GC.Data.NoSTD$Sample.Name)
GC.Data.NoSTD$CoverCrop<-c("NONE");
GC.Data.NoSTD[grep("3Spp",GC.Data.NoSTD$Sample.Name), c("CoverCrop")]<-c("3Spp");
GC.Data.NoSTD[grep("Clover",GC.Data.NoSTD$Sample.Name), c("CoverCrop")]<-c("Clover");
GC.Data.NoSTD[grep("Trit",GC.Data.NoSTD$Sample.Name), c("CoverCrop")]<-c("Trit");
GC.Data.NoSTD[which(GC.Data.NoSTD$CoverCrop == "NONE" ), ];
grep("T0",GC.Data.NoSTD$Sample.Name)
GC.Data.NoSTD$Sampling.Time<-c(9999);
GC.Data.NoSTD[grep("T0",GC.Data.NoSTD$Sample.Name), c("Sampling.Time")]<-c(0);
GC.Data.NoSTD[grep("T15",GC.Data.NoSTD$Sample.Name), c("Sampling.Time")]<-c(15);
GC.Data.NoSTD[grep("T30",GC.Data.NoSTD$Sample.Name), c("Sampling.Time")]<-c(30);
GC.Data.NoSTD[grep("T45",GC.Data.NoSTD$Sample.Name), c("Sampling.Time")]<-c(45);
GC.Data.NoSTD[which(GC.Data.NoSTD$Sampling.Time==9999),];
GC.Data.NoSTD$Treatment.F<-as.factor(GC.Data.NoSTD$Treatment) ;
GC.Data.NoSTD$BLOCK.F<-as.factor(GC.Data.NoSTD$BLOCK) ;
GC.Data.NoSTD$CoverCrop.F<-as.factor(GC.Data.NoSTD$CoverCrop) ;
str(GC.Data.NoSTD)
levels(GC.Data.NoSTD$Treatment.F)
levels(GC.Data.NoSTD$BLOCK.F)
levels(GC.Data.NoSTD$CoverCrop.F)
GC.Data.NoSTD[GC.Data.NoSTD$CoverCrop.F == "Clover" ,]
xyplot(CH4.ppm + N2O.ppm + CO2.ppm ~ Sampling.Time | Treatment.F * BLOCK.F * CoverCrop.F, data = GC.Data.NoSTD , xlim=c(0,45), type="o", auto.key = T);
xyplot(CO2.ppm ~ Sampling.Time | Treatment.F * BLOCK.F * CoverCrop.F,
data = GC.Data.NoSTD , xlim=c(0,45), type="o", auto.key = T);
xyplot(CO2.ppm ~ Sampling.Time | Treatment.F * BLOCK.F * CoverCrop.F,
data = GC.Data.NoSTD , xlim=c(0,45), ylim = c(0, max(GC.Data.NoSTD$CO2.ppm)) ,   type="o", auto.key = T);
xyplot(N2O.ppm ~ Sampling.Time | Treatment.F * BLOCK.F * CoverCrop.F,
data = GC.Data.NoSTD , xlim=c(0,45), ylim = c(0, max(GC.Data.NoSTD$N2O.ppm)) ,   type="o", auto.key = T);
xyplot(CH4.ppm ~ Sampling.Time | Treatment.F * BLOCK.F * CoverCrop.F,
data = GC.Data.NoSTD , xlim=c(0,45), ylim = c(0, max(GC.Data.NoSTD$CH4.ppm)) ,   type="o", auto.key = T);
Chamber.Dimensions<-data.frame(DIMENSION=c("Length", "Width" , "Height", "Volume" , "Surface.Area"),UNITS=c("m"), VALUE=c(0.52705, 0.32385, 0.1016, 9999, 9999));
Chamber.Dimensions[Chamber.Dimensions$DIMENSION =="Volume", c("VALUE")]<-Chamber.Dimensions[1,3]*Chamber.Dimensions[2,3]*Chamber.Dimensions[3,3] ;
Chamber.Dimensions[Chamber.Dimensions$DIMENSION =="Surface.Area", c("VALUE")]<-Chamber.Dimensions[1,3]*Chamber.Dimensions[2,3] ;
Molar.Mass<-data.frame(GAS=c("CH4" , "CO2" , "N2O"), UNITS=c("g/mol"), VALUE=c(16.04, 44.01, 44.013));
Gas.Law<-data.frame(UNITS=c("L-atm/Mol-K", "J/K-Mol", "m3-Pa/K-Mol", "Kg-m2-s2/K-Mol", "m3-atm/K-Mol"), VALUE=c(0.08205736, 8.314462,8.314462, 8.314462, 8.205736e-5 ));
install.packages("HMR",  dependencies = T)
library(HMR)
str(GC.Data.NoSTD)
unique(GC.Data.NoSTD$Sampling.Date)
unique(GC.Data.NoSTD$Sampling.Day)
Test.data.HMR <- GC.Data.NoSTD[GC.Data.NoSTD$Sampling.Day == "20220630" & GC.Data.NoSTD$BLOCK.F == "1" &
GC.Data.NoSTD$Treatment.F == "A" & GC.Data.NoSTD$CoverCrop.F == "3Spp" ,
c("CO2.ppm" , "N2O.ppm" , "CH4.ppm")]
Test.data.HMR
Test.data.HMR <- GC.Data.NoSTD[GC.Data.NoSTD$Sampling.Day == "20220630" & GC.Data.NoSTD$BLOCK.F == "1" &
GC.Data.NoSTD$Treatment.F == "A" & GC.Data.NoSTD$CoverCrop.F == "3Spp" ,
c( "Sampling.Time" ,  "CO2.ppm" , "N2O.ppm" , "CH4.ppm")]
Test.data.HMR
plot(CO2.ppm ~ Sampling.Time, data = Test.data.HMR[1:4,])
plot(CO2.ppm ~ Sampling.Time, data = Test.data.HMR[1:4,] , col = "red")
plot(N2O.ppm ~ Sampling.Time, data = Test.data.HMR[1:4,] , col = "blue")
plot(CH4.ppm ~ Sampling.Time, data = Test.data.HMR[1:4,] , col = "brown")
Test.data.HMR.1 <- Test.data.HMR[Test.data.HMR[1:4,]
HMR(filename = Test.data.HMR.1 , Test.data.HMR[1:4,])
HMR(filename = Test.data.HMR.1 )
Test.data.HMR.1 <- Test.data.HMR[1:4,]
HMR(filename = Test.data.HMR.1 )
Test.data.HMR.1
source.with.encoding(HMR)
source(HMR)
methods(HMR)
UseMethod(HMR)
UseMethod("HMR")
HMR
Test.data.HMR.1
Test.data.HMR$Series <- c(1,2)
Test.data.HMR$Series[1:4] <- 1
Test.data.HMR$Series
Test.data.HMR$Series <- 0
Test.data.HMR <- GC.Data.NoSTD[GC.Data.NoSTD$Sampling.Day == "20220630" & GC.Data.NoSTD$BLOCK.F == "1" &
GC.Data.NoSTD$Treatment.F == "A" & GC.Data.NoSTD$CoverCrop.F == "3Spp" ,
c( "Sampling.Time" ,  "CO2.ppm" , "N2O.ppm" , "CH4.ppm")] ;
str(GC.Data.NoSTD)
unique(GC.Data.NoSTD$Sampling.Day)
Test.data.HMR <- GC.Data.NoSTD[GC.Data.NoSTD$Sampling.Day == "20220630" & GC.Data.NoSTD$BLOCK.F == "1" &
GC.Data.NoSTD$Treatment.F == "A" & GC.Data.NoSTD$CoverCrop.F == "3Spp" ,
c( "Sampling.Time" ,  "CO2.ppm" , "N2O.ppm" , "CH4.ppm")] ;
rm(Test.data.HMR)
